// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/llm_service.dart';
import '../screens/chat/models/conversation.dart';
import '../screens/chat/models/message.dart';
import '../screens/reader/models/book_local.dart';
import '../screens/reader/models/book_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6707462596581586420),
      name: 'BookLocal',
      lastPropertyId: const IdUid(3, 7078609590508456723),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4714616925242471174),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1558628104240906393),
            name: 'localPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7078609590508456723),
            name: 'md5',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2377781516218894627),
      name: 'BookModel',
      lastPropertyId: const IdUid(29, 1550309893250125137),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5145468023147690668),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 11996826803372471),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4151224713551063478),
            name: 'identifier',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 3234125845898534854)),
        ModelProperty(
            id: const IdUid(4, 748250368840931782),
            name: 'author',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 142002621304961831),
            name: 'progress',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 721090536532963474),
            name: 'size',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4714584983541282893),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6616863920496308033),
            name: 'ctime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4653324342649627876),
            name: 'utime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3569405046062289156),
            name: 'subTitle',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2670856880955245301),
            name: 'language',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 508113337419259124),
            name: 'coverUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 750253216295725756),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4481054464976567198),
            name: 'isbn',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6271510966424834565),
            name: 'asin',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 3368241653469170233),
            name: 'authorUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 5141242604025256883),
            name: 'authorSort',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4319502457995714545),
            name: 'publisher',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 5043889894207422914),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 5124842745039157830),
            name: 'series',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 4012174187045566222),
            name: 'seriesIndex',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 3814369684469442117),
            name: 'pubdate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 2673555387814784463),
            name: 'rating',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 55997867239583174),
            name: 'publisherUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 729985418655754337),
            name: 'countVisit',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 507996690201045780),
            name: 'countDownload',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 4088798926593917462),
            name: 'progressIndex',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 1550309893250125137),
            name: 'paraPosition',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8701783815158741159),
      name: 'Conversation',
      lastPropertyId: const IdUid(10, 4373051813681724226),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8995399421908218659),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7070217944279259050),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5081038014541328299),
            name: 'timeout',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7988744154821074316),
            name: 'maxTokens',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4639405396114130885),
            name: 'editName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 329924133098302823),
            name: 'serviceId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6589093618973643310),
            name: 'autoQuote',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7301222825546517802),
            name: 'lastActive',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7029699488866037214),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4373051813681724226),
            name: 'promptId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5819575114060395614),
      name: 'LLMService',
      lastPropertyId: const IdUid(13, 6115828865270120181),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6933859970665620320),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4986517704711037439),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 1559909979686872173)),
        ModelProperty(
            id: const IdUid(3, 5948486554495538365),
            name: 'model',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 98509560938991298),
            name: 'avatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6992430437203680363),
            name: 'token',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7878994859142948657),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1744000268336573782),
            name: 'apiUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4562648906991317930),
            name: 'officialUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7646594681783991147),
            name: 'editApiUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7675220099801735937),
            name: 'hello',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6049293380507292524),
            name: 'help',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5101427925203102450),
            name: 'helpUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6115828865270120181),
            name: 'block',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 8278735069177484164),
      name: 'Message',
      lastPropertyId: const IdUid(7, 3050767139080148159),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1400617488877522774),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2633719418305916681),
            name: 'conversationId',
            type: 6,
            flags: 8,
            indexId: const IdUid(3, 1896456448200958387)),
        ModelProperty(
            id: const IdUid(3, 4710882586237443988),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6481958391296567526),
            name: 'error',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3059017529974268612),
            name: 'createAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4034256254584685073),
            name: 'dbMessageType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3050767139080148159),
            name: 'dbMessageFromType',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 8278735069177484164),
      lastIndexId: const IdUid(3, 1896456448200958387),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [2055331516529877016],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    BookLocal: EntityDefinition<BookLocal>(
        model: _entities[0],
        toOneRelations: (BookLocal object) => [],
        toManyRelations: (BookLocal object) => {},
        getId: (BookLocal object) => object.id,
        setId: (BookLocal object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field BookLocal.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (BookLocal object, fb.Builder fbb) {
          final localPathOffset = fbb.writeString(object.localPath);
          final md5Offset =
              object.md5 == null ? null : fbb.writeString(object.md5!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, localPathOffset);
          fbb.addOffset(2, md5Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final localPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final md5Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object =
              BookLocal(id: idParam, localPath: localPathParam, md5: md5Param);

          return object;
        }),
    BookModel: EntityDefinition<BookModel>(
        model: _entities[1],
        toOneRelations: (BookModel object) => [],
        toManyRelations: (BookModel object) => {},
        getId: (BookModel object) => object.id,
        setId: (BookModel object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field BookModel.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (BookModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final identifierOffset = fbb.writeString(object.identifier);
          final authorOffset = fbb.writeString(object.author);
          final pathOffset =
              object.path == null ? null : fbb.writeString(object.path!);
          final ctimeOffset =
              object.ctime == null ? null : fbb.writeString(object.ctime!);
          final utimeOffset =
              object.utime == null ? null : fbb.writeString(object.utime!);
          final subTitleOffset = object.subTitle == null
              ? null
              : fbb.writeString(object.subTitle!);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          final coverUrlOffset = object.coverUrl == null
              ? null
              : fbb.writeString(object.coverUrl!);
          final uuidOffset =
              object.uuid == null ? null : fbb.writeString(object.uuid!);
          final isbnOffset =
              object.isbn == null ? null : fbb.writeString(object.isbn!);
          final asinOffset =
              object.asin == null ? null : fbb.writeString(object.asin!);
          final authorUrlOffset = object.authorUrl == null
              ? null
              : fbb.writeString(object.authorUrl!);
          final authorSortOffset = object.authorSort == null
              ? null
              : fbb.writeString(object.authorSort!);
          final publisherOffset = object.publisher == null
              ? null
              : fbb.writeString(object.publisher!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final seriesOffset =
              object.series == null ? null : fbb.writeString(object.series!);
          final seriesIndexOffset = object.seriesIndex == null
              ? null
              : fbb.writeString(object.seriesIndex!);
          final pubdateOffset =
              object.pubdate == null ? null : fbb.writeString(object.pubdate!);
          final publisherUrlOffset = object.publisherUrl == null
              ? null
              : fbb.writeString(object.publisherUrl!);
          fbb.startTable(30);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, identifierOffset);
          fbb.addOffset(3, authorOffset);
          fbb.addFloat64(4, object.progress);
          fbb.addInt64(6, object.size);
          fbb.addOffset(7, pathOffset);
          fbb.addOffset(8, ctimeOffset);
          fbb.addOffset(9, utimeOffset);
          fbb.addOffset(10, subTitleOffset);
          fbb.addOffset(11, languageOffset);
          fbb.addOffset(12, coverUrlOffset);
          fbb.addOffset(13, uuidOffset);
          fbb.addOffset(14, isbnOffset);
          fbb.addOffset(15, asinOffset);
          fbb.addOffset(16, authorUrlOffset);
          fbb.addOffset(17, authorSortOffset);
          fbb.addOffset(18, publisherOffset);
          fbb.addOffset(19, descriptionOffset);
          fbb.addOffset(20, seriesOffset);
          fbb.addOffset(21, seriesIndexOffset);
          fbb.addOffset(22, pubdateOffset);
          fbb.addInt64(23, object.rating);
          fbb.addOffset(24, publisherUrlOffset);
          fbb.addInt64(25, object.countVisit);
          fbb.addInt64(26, object.countDownload);
          fbb.addInt64(27, object.progressIndex);
          fbb.addInt64(28, object.paraPosition);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final identifierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final authorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final progressParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final progressIndexParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 58);
          final paraPositionParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 60);
          final sizeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final ctimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final utimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final pubdateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 48);
          final ratingParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 50);
          final subTitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final languageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final coverUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 28);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final isbnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final asinParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final authorUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 36);
          final authorSortParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final publisherParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 40);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 42);
          final seriesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 44);
          final seriesIndexParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 46);
          final publisherUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 52);
          final countVisitParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 54);
          final countDownloadParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 56);
          final object = BookModel(
              id: idParam,
              title: titleParam,
              identifier: identifierParam,
              author: authorParam,
              progress: progressParam,
              progressIndex: progressIndexParam,
              paraPosition: paraPositionParam,
              size: sizeParam,
              path: pathParam,
              ctime: ctimeParam,
              utime: utimeParam,
              pubdate: pubdateParam,
              rating: ratingParam,
              subTitle: subTitleParam,
              language: languageParam,
              coverUrl: coverUrlParam,
              uuid: uuidParam,
              isbn: isbnParam,
              asin: asinParam,
              authorUrl: authorUrlParam,
              authorSort: authorSortParam,
              publisher: publisherParam,
              description: descriptionParam,
              series: seriesParam,
              seriesIndex: seriesIndexParam,
              publisherUrl: publisherUrlParam,
              countVisit: countVisitParam,
              countDownload: countDownloadParam);

          return object;
        }),
    Conversation: EntityDefinition<Conversation>(
        model: _entities[2],
        toOneRelations: (Conversation object) => [],
        toManyRelations: (Conversation object) => {},
        getId: (Conversation object) => object.id,
        setId: (Conversation object, int id) {
          object.id = id;
        },
        objectToFB: (Conversation object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final editNameOffset = object.editName == null
              ? null
              : fbb.writeString(object.editName!);
          final serviceIdOffset = fbb.writeString(object.serviceId);
          final promptIdOffset = object.promptId == null
              ? null
              : fbb.writeString(object.promptId!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.timeout);
          fbb.addInt64(3, object.maxTokens);
          fbb.addOffset(4, editNameOffset);
          fbb.addOffset(5, serviceIdOffset);
          fbb.addInt64(6, object.autoQuote);
          fbb.addInt64(7, object.lastActive.millisecondsSinceEpoch);
          fbb.addBool(8, object.isActive);
          fbb.addOffset(9, promptIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final editNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final serviceIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final autoQuoteParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final timeoutParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final maxTokensParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final promptIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final object = Conversation(
              id: idParam,
              name: nameParam,
              editName: editNameParam,
              serviceId: serviceIdParam,
              autoQuote: autoQuoteParam,
              timeout: timeoutParam,
              maxTokens: maxTokensParam,
              promptId: promptIdParam,
              isActive: isActiveParam)
            ..lastActive = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));

          return object;
        }),
    LLMService: EntityDefinition<LLMService>(
        model: _entities[3],
        toOneRelations: (LLMService object) => [],
        toManyRelations: (LLMService object) => {},
        getId: (LLMService object) => object.id,
        setId: (LLMService object, int id) {
          object.id = id;
        },
        objectToFB: (LLMService object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final modelOffset = fbb.writeString(object.model);
          final avatarOffset = fbb.writeString(object.avatar);
          final tokenOffset = fbb.writeString(object.token);
          final descOffset =
              object.desc == null ? null : fbb.writeString(object.desc!);
          final apiUrlOffset =
              object.apiUrl == null ? null : fbb.writeString(object.apiUrl!);
          final officialUrlOffset = object.officialUrl == null
              ? null
              : fbb.writeString(object.officialUrl!);
          final editApiUrlOffset = object.editApiUrl == null
              ? null
              : fbb.writeString(object.editApiUrl!);
          final helloOffset =
              object.hello == null ? null : fbb.writeString(object.hello!);
          final helpOffset =
              object.help == null ? null : fbb.writeString(object.help!);
          final helpUrlOffset =
              object.helpUrl == null ? null : fbb.writeString(object.helpUrl!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, modelOffset);
          fbb.addOffset(3, avatarOffset);
          fbb.addOffset(4, tokenOffset);
          fbb.addOffset(5, descOffset);
          fbb.addOffset(6, apiUrlOffset);
          fbb.addOffset(7, officialUrlOffset);
          fbb.addOffset(8, editApiUrlOffset);
          fbb.addOffset(9, helloOffset);
          fbb.addOffset(10, helpOffset);
          fbb.addOffset(11, helpUrlOffset);
          fbb.addBool(12, object.block);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final modelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final avatarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final tokenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final apiUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final officialUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final editApiUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final helloParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final helpParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final helpUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final blockParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final object = LLMService(
              id: idParam,
              name: nameParam,
              model: modelParam,
              avatar: avatarParam,
              token: tokenParam,
              desc: descParam,
              apiUrl: apiUrlParam,
              officialUrl: officialUrlParam,
              editApiUrl: editApiUrlParam,
              hello: helloParam,
              help: helpParam,
              helpUrl: helpUrlParam,
              block: blockParam);

          return object;
        }),
    Message: EntityDefinition<Message>(
        model: _entities[4],
        toOneRelations: (Message object) => [],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.id,
        setId: (Message object, int id) {
          object.id = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          final errorOffset =
              object.error == null ? null : fbb.writeString(object.error!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.conversationId);
          fbb.addOffset(2, contentOffset);
          fbb.addOffset(3, errorOffset);
          fbb.addInt64(4, object.createAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.dbMessageType);
          fbb.addInt64(6, object.dbMessageFromType);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final errorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createAtParam = createAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createAtValue);
          final conversationIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = Message(
              id: idParam,
              error: errorParam,
              content: contentParam,
              createAt: createAtParam,
              conversationId: conversationIdParam)
            ..dbMessageType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14)
            ..dbMessageFromType = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 16);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [BookLocal] entity fields to define ObjectBox queries.
class BookLocal_ {
  /// see [BookLocal.id]
  static final id = QueryIntegerProperty<BookLocal>(_entities[0].properties[0]);

  /// see [BookLocal.localPath]
  static final localPath =
      QueryStringProperty<BookLocal>(_entities[0].properties[1]);

  /// see [BookLocal.md5]
  static final md5 = QueryStringProperty<BookLocal>(_entities[0].properties[2]);
}

/// [BookModel] entity fields to define ObjectBox queries.
class BookModel_ {
  /// see [BookModel.id]
  static final id = QueryIntegerProperty<BookModel>(_entities[1].properties[0]);

  /// see [BookModel.title]
  static final title =
      QueryStringProperty<BookModel>(_entities[1].properties[1]);

  /// see [BookModel.identifier]
  static final identifier =
      QueryStringProperty<BookModel>(_entities[1].properties[2]);

  /// see [BookModel.author]
  static final author =
      QueryStringProperty<BookModel>(_entities[1].properties[3]);

  /// see [BookModel.progress]
  static final progress =
      QueryDoubleProperty<BookModel>(_entities[1].properties[4]);

  /// see [BookModel.size]
  static final size =
      QueryIntegerProperty<BookModel>(_entities[1].properties[5]);

  /// see [BookModel.path]
  static final path =
      QueryStringProperty<BookModel>(_entities[1].properties[6]);

  /// see [BookModel.ctime]
  static final ctime =
      QueryStringProperty<BookModel>(_entities[1].properties[7]);

  /// see [BookModel.utime]
  static final utime =
      QueryStringProperty<BookModel>(_entities[1].properties[8]);

  /// see [BookModel.subTitle]
  static final subTitle =
      QueryStringProperty<BookModel>(_entities[1].properties[9]);

  /// see [BookModel.language]
  static final language =
      QueryStringProperty<BookModel>(_entities[1].properties[10]);

  /// see [BookModel.coverUrl]
  static final coverUrl =
      QueryStringProperty<BookModel>(_entities[1].properties[11]);

  /// see [BookModel.uuid]
  static final uuid =
      QueryStringProperty<BookModel>(_entities[1].properties[12]);

  /// see [BookModel.isbn]
  static final isbn =
      QueryStringProperty<BookModel>(_entities[1].properties[13]);

  /// see [BookModel.asin]
  static final asin =
      QueryStringProperty<BookModel>(_entities[1].properties[14]);

  /// see [BookModel.authorUrl]
  static final authorUrl =
      QueryStringProperty<BookModel>(_entities[1].properties[15]);

  /// see [BookModel.authorSort]
  static final authorSort =
      QueryStringProperty<BookModel>(_entities[1].properties[16]);

  /// see [BookModel.publisher]
  static final publisher =
      QueryStringProperty<BookModel>(_entities[1].properties[17]);

  /// see [BookModel.description]
  static final description =
      QueryStringProperty<BookModel>(_entities[1].properties[18]);

  /// see [BookModel.series]
  static final series =
      QueryStringProperty<BookModel>(_entities[1].properties[19]);

  /// see [BookModel.seriesIndex]
  static final seriesIndex =
      QueryStringProperty<BookModel>(_entities[1].properties[20]);

  /// see [BookModel.pubdate]
  static final pubdate =
      QueryStringProperty<BookModel>(_entities[1].properties[21]);

  /// see [BookModel.rating]
  static final rating =
      QueryIntegerProperty<BookModel>(_entities[1].properties[22]);

  /// see [BookModel.publisherUrl]
  static final publisherUrl =
      QueryStringProperty<BookModel>(_entities[1].properties[23]);

  /// see [BookModel.countVisit]
  static final countVisit =
      QueryIntegerProperty<BookModel>(_entities[1].properties[24]);

  /// see [BookModel.countDownload]
  static final countDownload =
      QueryIntegerProperty<BookModel>(_entities[1].properties[25]);

  /// see [BookModel.progressIndex]
  static final progressIndex =
      QueryIntegerProperty<BookModel>(_entities[1].properties[26]);

  /// see [BookModel.paraPosition]
  static final paraPosition =
      QueryIntegerProperty<BookModel>(_entities[1].properties[27]);
}

/// [Conversation] entity fields to define ObjectBox queries.
class Conversation_ {
  /// see [Conversation.id]
  static final id =
      QueryIntegerProperty<Conversation>(_entities[2].properties[0]);

  /// see [Conversation.name]
  static final name =
      QueryStringProperty<Conversation>(_entities[2].properties[1]);

  /// see [Conversation.timeout]
  static final timeout =
      QueryIntegerProperty<Conversation>(_entities[2].properties[2]);

  /// see [Conversation.maxTokens]
  static final maxTokens =
      QueryIntegerProperty<Conversation>(_entities[2].properties[3]);

  /// see [Conversation.editName]
  static final editName =
      QueryStringProperty<Conversation>(_entities[2].properties[4]);

  /// see [Conversation.serviceId]
  static final serviceId =
      QueryStringProperty<Conversation>(_entities[2].properties[5]);

  /// see [Conversation.autoQuote]
  static final autoQuote =
      QueryIntegerProperty<Conversation>(_entities[2].properties[6]);

  /// see [Conversation.lastActive]
  static final lastActive =
      QueryIntegerProperty<Conversation>(_entities[2].properties[7]);

  /// see [Conversation.isActive]
  static final isActive =
      QueryBooleanProperty<Conversation>(_entities[2].properties[8]);

  /// see [Conversation.promptId]
  static final promptId =
      QueryStringProperty<Conversation>(_entities[2].properties[9]);
}

/// [LLMService] entity fields to define ObjectBox queries.
class LLMService_ {
  /// see [LLMService.id]
  static final id =
      QueryIntegerProperty<LLMService>(_entities[3].properties[0]);

  /// see [LLMService.name]
  static final name =
      QueryStringProperty<LLMService>(_entities[3].properties[1]);

  /// see [LLMService.model]
  static final model =
      QueryStringProperty<LLMService>(_entities[3].properties[2]);

  /// see [LLMService.avatar]
  static final avatar =
      QueryStringProperty<LLMService>(_entities[3].properties[3]);

  /// see [LLMService.token]
  static final token =
      QueryStringProperty<LLMService>(_entities[3].properties[4]);

  /// see [LLMService.desc]
  static final desc =
      QueryStringProperty<LLMService>(_entities[3].properties[5]);

  /// see [LLMService.apiUrl]
  static final apiUrl =
      QueryStringProperty<LLMService>(_entities[3].properties[6]);

  /// see [LLMService.officialUrl]
  static final officialUrl =
      QueryStringProperty<LLMService>(_entities[3].properties[7]);

  /// see [LLMService.editApiUrl]
  static final editApiUrl =
      QueryStringProperty<LLMService>(_entities[3].properties[8]);

  /// see [LLMService.hello]
  static final hello =
      QueryStringProperty<LLMService>(_entities[3].properties[9]);

  /// see [LLMService.help]
  static final help =
      QueryStringProperty<LLMService>(_entities[3].properties[10]);

  /// see [LLMService.helpUrl]
  static final helpUrl =
      QueryStringProperty<LLMService>(_entities[3].properties[11]);

  /// see [LLMService.block]
  static final block =
      QueryBooleanProperty<LLMService>(_entities[3].properties[12]);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// see [Message.id]
  static final id = QueryIntegerProperty<Message>(_entities[4].properties[0]);

  /// see [Message.conversationId]
  static final conversationId =
      QueryIntegerProperty<Message>(_entities[4].properties[1]);

  /// see [Message.content]
  static final content =
      QueryStringProperty<Message>(_entities[4].properties[2]);

  /// see [Message.error]
  static final error = QueryStringProperty<Message>(_entities[4].properties[3]);

  /// see [Message.createAt]
  static final createAt =
      QueryIntegerProperty<Message>(_entities[4].properties[4]);

  /// see [Message.dbMessageType]
  static final dbMessageType =
      QueryIntegerProperty<Message>(_entities[4].properties[5]);

  /// see [Message.dbMessageFromType]
  static final dbMessageFromType =
      QueryIntegerProperty<Message>(_entities[4].properties[6]);
}
