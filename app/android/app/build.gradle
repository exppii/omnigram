plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.lxpio.omnigram"
    compileSdk = flutter.compileSdkVersion
    // ndkVersion = flutter.ndkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.lxpio.omnigram"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 31
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName


    }
    signingConfigs {
       release {

            def keyAliasVal = System.getenv("ALIAS")
            def keyPasswordVal = System.getenv("ANDROID_KEY_PASSWORD")
            def storePasswordVal = System.getenv("ANDROID_STORE_PASSWORD")


            keyAlias keyAliasVal ? keyAliasVal : keystoreProperties['keyAlias']
            keyPassword keyPasswordVal ? keyPasswordVal : keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : file("../key.jks") 
            storePassword storePasswordVal ? storePasswordVal : keystoreProperties['storePassword']
        
       }    
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
        debug {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}


dependencies {
    def kotlin_version = '2.0.20'
    def kotlin_coroutines_version = '1.9.0'
    def work_version = '2.9.1'
    def concurrent_version = '1.2.0'
    def guava_version = '33.3.1-android'
    def glide_version = '4.16.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.concurrent:concurrent-futures:$concurrent_version"
    implementation "com.google.guava:guava:$guava_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation 'androidx.core:core-ktx:1.13.1'
 
}