diff --git a/app/openapi/lib/src/api/default_api.dart b/app/openapi/lib/src/api/default_api.dart
index 4c4ac51..9023257 100644
--- a/app/openapi/lib/src/api/default_api.dart
+++ b/app/openapi/lib/src/api/default_api.dart
@@ -1,9 +1,10 @@
 //
 // AUTO-GENERATED FILE, DO NOT MODIFY!
 //
-
+import 'package:sse_stream/sse_stream.dart';
 import 'dart:async';
-
+import 'dart:convert';
+import 'dart:io';
 import 'package:built_value/json_object.dart';
 import 'package:built_value/serializer.dart';
 import 'package:dio/dio.dart';
@@ -1465,7 +1466,7 @@ class DefaultApi {
   ///
   /// Returns a [Future] containing a [Response] with a [JsonObject] as data
   /// Throws [DioException] if API call or serialization fails
-  Future<Response<JsonObject>> m4tTtsStreamPost({
+  Future<Response<T>> m4tTtsStreamPost<T>({
     M4tTtsStreamPostRequest? m4tTtsStreamPostRequest,
     CancelToken? cancelToken,
     Map<String, dynamic>? headers,
@@ -1492,6 +1493,7 @@ class DefaultApi {
       },
       contentType: 'application/json',
       validateStatus: validateStatus,
+      responseType: ResponseType.stream,
     );
 
     dynamic _bodyData;
@@ -1513,7 +1515,7 @@ class DefaultApi {
       );
     }
 
-    final _response = await _dio.request<Object>(
+    return await _dio.request<T>(
       _path,
       data: _bodyData,
       options: _options,
@@ -1521,37 +1523,6 @@ class DefaultApi {
       onSendProgress: onSendProgress,
       onReceiveProgress: onReceiveProgress,
     );
-
-    JsonObject? _responseData;
-
-    try {
-      final rawResponse = _response.data;
-      _responseData = rawResponse == null
-          ? null
-          : _serializers.deserialize(
-              rawResponse,
-              specifiedType: const FullType(JsonObject),
-            ) as JsonObject;
-    } catch (error, stackTrace) {
-      throw DioException(
-        requestOptions: _response.requestOptions,
-        response: _response,
-        type: DioExceptionType.unknown,
-        error: error,
-        stackTrace: stackTrace,
-      );
-    }
-
-    return Response<JsonObject>(
-      data: _responseData,
-      headers: _response.headers,
-      isRedirect: _response.isRedirect,
-      requestOptions: _response.requestOptions,
-      redirects: _response.redirects,
-      statusCode: _response.statusCode,
-      statusMessage: _response.statusMessage,
-      extra: _response.extra,
-    );
   }
 
   /// 书籍详情
@@ -2697,7 +2668,7 @@ class DefaultApi {
   ///
   /// Returns a [Future] containing a [Response] with a [BuiltList<EbookDto>] as data
   /// Throws [DioException] if API call or serialization fails
-  Future<Response<BuiltList<EbookDto>>> syncFullPost({
+  Stream<BuiltList<EbookDto>> syncFullPost({
     FullSyncDto? fullSyncDto,
     CancelToken? cancelToken,
     Map<String, dynamic>? headers,
@@ -2705,7 +2676,7 @@ class DefaultApi {
     ValidateStatus? validateStatus,
     ProgressCallback? onSendProgress,
     ProgressCallback? onReceiveProgress,
-  }) async {
+  }) async* {
     final _path = r'/sync/full';
     final _options = Options(
       method: r'POST',
@@ -2724,6 +2695,7 @@ class DefaultApi {
       },
       contentType: 'application/json',
       validateStatus: validateStatus,
+      responseType: ResponseType.stream,
     );
 
     dynamic _bodyData;
@@ -2743,7 +2715,7 @@ class DefaultApi {
       );
     }
 
-    final _response = await _dio.request<Object>(
+    final _response = await _dio.request<ResponseBody>(
       _path,
       data: _bodyData,
       options: _options,
@@ -2752,36 +2724,24 @@ class DefaultApi {
       onReceiveProgress: onReceiveProgress,
     );
 
-    BuiltList<EbookDto>? _responseData;
-
-    try {
-      final rawResponse = _response.data;
-      _responseData = rawResponse == null
-          ? null
-          : _serializers.deserialize(
-              rawResponse,
-              specifiedType: const FullType(BuiltList, [FullType(EbookDto)]),
-            ) as BuiltList<EbookDto>;
-    } catch (error, stackTrace) {
-      throw DioException(
-        requestOptions: _response.requestOptions,
-        response: _response,
-        type: DioExceptionType.unknown,
-        error: error,
-        stackTrace: stackTrace,
-      );
+    if (_response.statusCode != 200) {
+      throw Exception('Failed to connect to event stream: Status code ${_response.statusCode}');
     }
 
-    return Response<BuiltList<EbookDto>>(
-      data: _responseData,
-      headers: _response.headers,
-      isRedirect: _response.isRedirect,
-      requestOptions: _response.requestOptions,
-      redirects: _response.redirects,
-      statusCode: _response.statusCode,
-      statusMessage: _response.statusMessage,
-      extra: _response.extra,
-    );
+    await for (final event
+        in _response.data!.stream.cast<List<int>>().transform(Utf8Decoder()).transform(const SseEventTransformer())) {
+      try {
+        if (event.data != null) {
+          final current = _serializers.deserialize(
+            jsonDecode(event.data!),
+            specifiedType: const FullType(BuiltList, [FullType(EbookDto)]),
+          ) as BuiltList<EbookDto>;
+          yield current;
+        }
+      } catch (e) {
+        throw Exception('Failed to parse event stream:  ${event.data} ${e.toString()}');
+      }
+    }
   }
 
   /// 获取系统信息
